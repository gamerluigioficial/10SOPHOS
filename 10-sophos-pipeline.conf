# ==============================================================================                                                                             ===
# PIPELINE LOGSTASH PARA SOPHOS XG FIREWALL -> OPENSEARCH
# ==============================================================================                                                                             ===

# ------------------------------------------------------------------------------                                                                             ---
# ESTÁGIO 1: ENTRADA (INPUT)
# Recebe os logs do Sophos. Usamos o plugin 'syslog' que já entende o protocolo.
# ------------------------------------------------------------------------------                                                                             ---
input {
  syslog {
    port => 5140
    # O codec 'syslog' já está implícito, mas é bom saber que ele está sendo usa                                                                             do.
  }
}

# ------------------------------------------------------------------------------                                                                             ---
# ESTÁGIO 2: FILTRO (FILTER)
# A mágica acontece aqui. Estruturamos os dados brutos.
# ------------------------------------------------------------------------------                                                                             ---
filter {
  # Grok é usado para extrair campos de uma linha de texto usando padrões.
  # Este padrão é um bom ponto de partida para logs do Sophos XG.
  grok {
    match => { "message" => "<%{POSINT:syslog_pri}>%{GREEDYDATA:sophos_log}" }
    # Se o padrão falhar, uma tag é adicionada para facilitar a depuração.
    tag_on_failure => ["_sophos_grok_parse_failure"]
  }

  # O Sophos envia logs no formato "key=value". O plugin KV (Key-Value)
  # é perfeito para extrair esses campos automaticamente.
  if [sophos_log] {
    kv {
      source => "sophos_log"
      field_split_pattern => "\s+" # Divide os campos por um ou mais espaços
      value_split_pattern => "="   # Separa a chave do valor com o sinal de '='
      # Tenta remover as aspas dos valores. Ex: log_component="Firewall Rule" ->                                                                              "Firewall Rule"
      trim_value => "\""
    }
  }

  # Converte os tipos de dados de texto para números, o que é melhor para anális                                                                             es.
  mutate {
    convert => {
      "src_port" => "integer"
      "dst_port" => "integer"
      "sent_pkts" => "integer"
      "recv_pkts" => "integer"
      "sent_bytes" => "integer"
      "recv_bytes" => "integer"
      "rule_id" => "integer"
    }
  }

  # O plugin GeoIP enriquece os IPs de origem e destino com dados de geolocaliza                                                                             ção.
  # Ótimo para criar mapas no OpenSearch Dashboards!
  geoip {
    source => "src_ip"
    target => "geoip_src"
  }
  geoip {
    source => "dst_ip"
    target => "geoip_dst"
  }

  # ============================================================================                                                                             =====
  # INÍCIO DO BLOCO DE GEOLOCALIZAÇÃO PARA MAPAS
  # Este bloco transforma a latitude e longitude para um formato que o mapa ente                                                                             nde.
  # ============================================================================                                                                             =====
  if [geoip_src][location][lat] and [geoip_src][location][lon] {
      mutate {
          # Apenas une a latitude e longitude em um texto simples (formato: "lat                                                                             ,lon")
          add_field => { "[geoip_src][geo][location]" => "%{[geoip_src][location                                                                             ][lat]},%{[geoip_src][location][lon]}" }
      }
  }

  if [geoip_dst][location][lat] and [geoip_dst][location][lon] {
      mutate {
          # Apenas une a latitude e longitude em um texto simples (formato: "lat                                                                             ,lon")
          add_field => { "[geoip_dst][location_point]" => "%{[geoip_dst][locatio                                                                             n][lat]},%{[geoip_dst][location][lon]}" }
      }
  }
  # ============================================================================                                                                             =====
  # FIM DO BLOCO DE GEOLOCALIZAÇÃO
  # ============================================================================                                                                             =====

  # Limpeza final: removemos campos que não são mais necessários.
  mutate {
    remove_field => ["message", "syslog_pri", "sophos_log", "host"]
  }
}

# ------------------------------------------------------------------------------                                                                             ---
# ESTÁGIO 3: SAÍDA (OUTPUT)
# Envia os dados processados para o OpenSearch.
# ------------------------------------------------------------------------------                                                                             ---
output {
  # A saída para o OpenSearch agora está ATIVA.
  opensearch {
    hosts => ["https://127.0.0.1:9200"]
    index => "sophos-xg-%{+YYYY.MM.dd}"
    user => "admin"
    password => "Ccilog123@#"
    ssl_certificate_verification => false
  }

  # A saída para o console agora está DESATIVADA.
  #   stdout {
  #     codec => rubydebug
  #   }
}
